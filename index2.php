<?php
error_reporting(-1);
//1)

// a.Создайте массив $arr=['a', 'b', 'c']. Выведите значение массива на экран с помощью функции var_dump().
echo "a. ";
$arr = ['a', 'b', 'c'];
var_dump($arr);

// b.Выведите на экран содержимое первого, второго и третьего элементов массива $arr из предыдущего пункта .
echo "<br>b. ";
echo "Item1: $arr[0], item2: $arr[1], item3: $arr[2]";

// c.Создайте массив $arr=['a', 'b', 'c', 'd'] и с его помощью выведите на экран строку 'a+b, c+d'.
$arr=['a', 'b', 'c', 'd'];
echo "<br>c. $arr[0]+$arr[1], $arr[2]+$arr[3]";

// d.Создайте массив $arr с элементами 2, 5, 3, 9. Умножьте первый элемент массива на второй, а третий элемент на четвертый. Результаты сложите, присвойте переменной $result. Выведите на экран значение этой переменной.
$arr=[2, 5, 3, 9];
$result = $arr[0] * $arr[1] + $arr[2] * $arr[3];
echo "<br>d. $result";

// e.Заполните массив $arr числами от 1 до 5. Не объявляйте массив, а просто заполните его присваиванием $arr[] = новое значение.
$arr = [];
$arr[] = 1;
$arr[] = 2;
$arr[] = 3;
$arr[] = 4;
$arr[] = 5;
echo "<br>e. ";
var_dump($arr);

// f.Создайте массив $arr. Выведите на экран элемент с ключом 'c'. $arr = ['a'=>1, 'b'=>2, 'c'=>3];
$arr = ['a'=>1, 'b'=>2, 'c'=>3];
echo "<br>f. {$arr['c']}";

// g.Создайте массив $arr. Найдите сумму элементов этого массива. $arr = ['a'=>1, 'b'=>2, 'c'=>3];
$arr = ['a'=>1, 'b'=>2, 'c'=>3];
echo "<br>g. " . array_sum($arr);

// h.Создайте массив заработных плат $arr. Выведите на экран зарплату Пети и Коли. $arr = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
$arr = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
echo "<br>h. Зарплата Пети: {$arr['Петя']}, зарплата Коли: {$arr['Коля']}";

// i.Создайте ассоциативный массив дней недели. Ключами в нем должны служить номера дней от начала недели (понедельник - должен иметь ключ 1, вторник - 2 и т.д.). Выведите на экран текущий день недели.
$week = [
    1 => 'Понедельник',
    2 => 'Вторник',
    3 => 'Среда',
    4 => 'Четверг',
    5 => 'Пятница',
    6 => 'Суббота',
    7 => 'Воскресенье',
];
echo "<br>i. " . $week[date("N")];


// j.Пусть теперь номер дня недели хранится в переменной $day, например там лежит число 3. Выведите день недели, соответствующий значению переменной $day.
$day = 3;
echo "<br>j. " . $week[3];

// k.Создайте многомерный массив $arr. С его помощью выведите на экран слова 'joomla', 'drupal', 'зеленый', 'красный'.
$arr = [
    ['joomla', 'drupal'], 
    ['зеленый', 'красный']
];
echo "<br>k. '{$arr[0][0]}', '{$arr[0][1]}', '{$arr[1][0]}', '{$arr[1][1]}'.";


// l.Создайте двумерный массив. Первые два ключа - это 'ru' и 'en'. Пусть первый ключ содержит элемент, являющийся массивом названий дней недели по-русски, а второй - по-английски. Выведите с помощью этого массива понедельник по-русски и среду по английски (пусть понедельник - это первый день).
$arr = [
    'ru' => [
        1 => 'Понедельник',
        2 => 'Вторник',
        3 => 'Среда',
        4 => 'Четверг',
        5 => 'Пятница',
        6 => 'Суббота',
        7 => 'Воскресенье',
    ],
    'en' => [
        1 => 'Monday',
        2 => 'Tuesday',
        3 => 'Wednesday',
        4 => 'Thursday',
        5 => 'Friday',
        6 => 'Saturday',
        7 => 'Sunday',
    ]
];
echo "<br>l. {$arr['ru'][1]}, {$arr['en'][3]}";

// m.Пусть теперь в переменной $lang хранится язык (она принимает одно из значений или 'ru', или 'en' - либо то, либо то), а в переменной $day - номер дня. Выведите словом день недели, соответствующий переменным $lang и $day. То есть: если, к примеру, $lang = 'ru' и $day = 3 - то выведем 'среда'.
$lang = 'ru';
$day = 3;
// echo "<br>m. " . $arr[$lang][$day];
echo "<br>m. {$arr[$lang][$day]}";

//2) 
echo "<hr>2)<br>";
//a. Есть двумерный массив в котором хранятся числа. Каждая строка это вложения/съем в банк сумм денег одним человеком (если съем, то число отрицательное), каждый взнос/съем хранится в отдельной ячейке. 
// Посчитать сумму денег которая есть у каждого человека и вывести на экран список сумм отсортировав его от большей суммы к меньшей. 
// Значения для демонстрации расчетов задать самостоятельно.
echo "a.<br>";
$arr = [
    "Миша" => ['10000', '-5000', '15000', '-10000'],
    "Вася" => ['20000', '-5000', '-10000', '50000']
];
foreach ($arr as $key => $value) {
    echo "$key: " . array_sum($value) . "<br>";
    // sort($value);
    // for ($i=0; $i < count($value); $i++) { 
    //     echo "&nbsp;&nbsp;&nbsp;&nbsp;$value[$i]<br>";
    // };
    arsort($value);
    foreach ($value as $value2) {
        echo "&nbsp;&nbsp;&nbsp;&nbsp;$value2<br>";
    }
}
echo "Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/2SK65vLjECu1\">https://prnt.sc/2SK65vLjECu1</a><br>";

//b. Написать функцию которая выводит на экран простые числа (в математике числа называются простыми которые целочисленно делятся только на себя и на единицу) в заданном диапазоне. Диапазон передается в функцию в качестве массива(пример такого диапазона: $range = [1,50]). 
// Так же вывести на экран отдельным блоком все составные числа (не простые).
echo "<br>b.<br>";
$range = [1,50];
function prime_numbers($arr) {
    echo "Простые числа диапазона: ";
    $complex_numbers = [];
    $prime_numbers = [];
    for ($i=$arr[0]; $i<=$arr[1]; $i++) {
        $prime = false;
        for ($j=2; $j<$i; $j++) {
            if ($i % $j == 0) {
                $prime = true;
                break;
            }
        };
        if ($prime) {
            $complex_numbers[] = $i;
        } else {
            echo "$i ";
            $prime_numbers[] = $i;
        }
    }
    return [$prime_numbers, $complex_numbers];
}

$numbers = prime_numbers($range);

echo "<br>Составные числа диапазона: ";
foreach ($numbers[1] as $key => $value) {
    echo "$value ";
};
echo "<br>Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/xWlDovHJPkid\">https://prnt.sc/xWlDovHJPkid</a><br>";

//c. В задаче будем использовать функцию rand() она из заданного диапазона значений выбирает одно случайное. Необходимо определить пессимист компьютер или оптимист. Пусть $computer = rand(0,1). Если $computer выбирает 0, то он пессимист, если выбирает 1, то он оптимист. Выполнить опрос компьютера 100 раз и вывести на экран по итогу всех этих итераций вывод - пессимист этот компьютер сегодня/сейчас или оптимист. Подсказка: не нужно выводить 100 раз пессимист/оптимист, а нужен итог с цифрами, типа на 55% оптимист.
echo "<br>c.<br>";

$summ = 0;
for ($i=0; $i<100; $i++) {
    $computer = rand(0,1);
    $summ += $computer;
};
if ($summ < 50) {
    echo "Компьютер пессимист ($summ%)";
} else {
    echo "Компьютер оптимист ($summ%)";
};
echo "<br>Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/fH7bDWmsfICf\">https://prnt.sc/fH7bDWmsfICf</a><br>";

//d. В переменной $password хранится шестизначный пароль, например 302390. Необходимо написать программу которая методом перебора найдет пароль. 
// Считать, что пароль может начинаться с нуля: 054534 - тоже является вариантом пароля.
echo "<br>d.<br>";
$password = '054534';

for ($i=0; $i < 1000000; $i++) { 
    $serch = sprintf("%06d", $i);
    if ($serch === $password) {
        echo "$serch<br>";
    }
}
echo "Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/RFMOLTMhfXLF\">https://prnt.sc/RFMOLTMhfXLF</a><br>";

//e. Даны два одноразрядных числа заданных с помощью слов (например $a=’семь’ и b=’четыре’). Вывести на экран, в виде числа, результат сложения этих цифр. Проверить результат сложения на разрядность, если разрядность больше 1, то вывести сообщение “большое число”, иначе вывести сообщение “маленькое число”.
echo "<br>e.<br>";
$a='семь';
$b='четыре';
$numbers = [
    1 => 'один',
    2 => 'два',
    3 => 'три',
    4 => 'четыре',
    5 => 'пять',
    6 => 'шесть',
    7 => 'семь',
    8 => 'восемь',
    9 => 'девять',
];
$summ = array_search($a, $numbers) + array_search($b, $numbers);
echo $summ . "<br>";
if ($summ < 10):
    echo "Маленькое число<br>";
else:
    echo "Большое число<br>";
endif;
echo "Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/K6T3Z-TLa923\">https://prnt.sc/K6T3Z-TLa923</a><br>";

//f. Предположим у нас в программе цены хранятся в виде целых чисел, но фактически - два последних разряда числа обозначают копейки. Например, цена товара хранится в виде 10050, это значит что товар стоит 100 рублей 50 копеек. Написать программу которая выведет на экран цену в двух форматах “N рубл[ей/я] M копе[ек/ки].” и “N.M руб.” увеличив при этом цену товара на 13 процентов. В программе использовать оператор % ($a % $b - целочисленный остаток от деления $a на $b).
echo "<br>f.<br>";
$price = 10050;
$new_price = intval($price + $price/100*13);
$rub = intdiv($new_price, 100);
$cop = $new_price % 100;



if ($rub % 10 == 0 || $rub % 10 > 4):
    $rub_word = "рублей";
elseif ($rub % 10 == 1):
    $rub_word = "рубль";
else:
    $rub_word = "рубля";
endif;

if ($cop % 10 == 0 || $cop % 10 > 4):
    $cop_word = "копеек";
elseif ($cop % 10 == 1):
    $cop_word = "копейка";
else:
    $cop_word = "копейки";
endif;

echo "$rub $rub_word $cop $cop_word<br>";
echo "$rub.$cop руб.<br>";
echo "Блок-схема: <a target=\"_blank\" href=\"https://prnt.sc/l11bckUNpDYL\">https://prnt.sc/l11bckUNpDYL</a><br>";

// 3) 
echo "<hr>3)<br>";

//a. Сделать настройки вашего php которые позволят выводить на экран ошибки уровня notice и deprecated.
//b. Продемонстрировать результат ошибок всех типов, ломая свой скрипт (fatal, error, notice и deprecated) - для отчета сделать скриншот с ошибками.

// echo "https://prnt.sc/g3r4Jg0x3bNe";
echo "fatal: <a target=\"_blank\" href=\"https://prnt.sc/t7P9IqVB8mVN\">https://prnt.sc/t7P9IqVB8mVN</a><br>";
echo "warning <a target=\"_blank\" href=\"https://prnt.sc/SATCIJYyr-px\">https://prnt.sc/SATCIJYyr-px</a><br>";
echo "notice: <a target=\"_blank\" href=\"https://prnt.sc/NiUU-Imz9E1K\">https://prnt.sc/NiUU-Imz9E1K</a><br>";
echo "deprecated: <a target=\"_blank\" href=\"https://prnt.sc/RgHd2OPdqdtp\">https://prnt.sc/RgHd2OPdqdtp</a><br>";
